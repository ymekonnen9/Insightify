AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Insightify App: The complete serverless application stack with correct BasePath mapping for the custom domain.

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  AnalysisApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      # The global CORS configuration. The BasePath mapping will ensure this applies correctly.
      Cors:
        AllowOrigin: "'*'" # Use '*' for testing, then lock to your domain.
        AllowMethods: "'OPTIONS,GET,POST'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      Domain:
        DomainName: api.insightify.yaredmekonnendomain.click
        BasePath: 'v1' # YOUR KEY DISCOVERY! This maps the custom domain to the /v1 stage.
        CertificateArn: arn:aws:acm:us-east-1:832753618852:certificate/db310121-6838-4156-96cb-a06c5d76f94c
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z02492692BM7HFE9JW03Y

  SubmitLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Insightify.Submit::Insightify.Submit.Function::FunctionHandler
      Runtime: dotnet8
      CodeUri: Insightify.Submit/
      Environment:
        Variables:
          ANALYSIS_TABLE_NAME: !Ref AnalysisTable
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy: { TableName: !Ref AnalysisTable }
        - SQSSendMessagePolicy: { QueueName: !GetAtt AnalysisQueue.QueueName }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AnalysisApi
            Path: /analysis
            Method: ANY # ANY is a robust fallback for CORS.

  GetStatusLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Insightify.GetStatus::Insightify.GetStatus.Function::FunctionHandler
      Runtime: dotnet8
      CodeUri: Insightify.GetStatus/
      Environment:
        Variables:
          ANALYSIS_TABLE_NAME: !Ref AnalysisTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy: { TableName: !Ref AnalysisTable }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AnalysisApi
            Path: /analysis/{jobId}
            Method: ANY # ANY is a robust fallback for CORS.

  AnalysisQueue:
    Type: AWS::SQS::Queue

  AnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: [{AttributeName: JobId, AttributeType: S}]
      KeySchema: [{AttributeName: JobId, KeyType: HASH}]
      BillingMode: PAY_PER_REQUEST

  ProcessLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Insightify.Process::Insightify.Process.Function::FunctionHandler
      Runtime: dotnet8
      CodeUri: Insightify.Process/
      MemorySize: 256
      Environment: { Variables: { ANALYSIS_TABLE_NAME: !Ref AnalysisTable } }
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy: { QueueName: !GetAtt AnalysisQueue.QueueName }
        - DynamoDBCrudPolicy: { TableName: !Ref AnalysisTable }
        - ComprehendBasicAccessPolicy: {}
      Events:
        SQSEvent: { Type: SQS, Properties: { Queue: !GetAtt AnalysisQueue.Arn, BatchSize: 5 } }
